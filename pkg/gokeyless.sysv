#!/bin/sh
# Init script for gokeyless
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          gokeyless
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: 
# Description:        Starts Go Keyless Server as a daemon.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

if [ `id -u` -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

name=gokeyless
program=/usr/local/bin/gokeyless
pidfile="/var/run/$name.pid"

# Optional
PORT=2407
METRICS_PORT=2408
LOG_LEVEL=0

# Required
WORKDIR=/etc/keyless
USER=keyless
GROUP=keyless

args="--pid-file=${pidfile}"

trace() {
  logger -t "/etc/init.d/gokeyless" "$@"
}

emit() {
  trace "$@"
  echo "$@"
}

start() {
  type "$program" >/dev/null 2>/dev/null
  if [ $? -eq 1 ]; then
    emit "$name is not installed in $program"
    return 1;
  fi

  [ -f $pidfile ] && rm -f $pidfile

  cd $WORKDIR
  sh -c "
    exec \"$program\" $args
  " 2>>/var/log/$name.log &

  for i in 0 1 2 3 4 5 6 7 8 9 10; do
    [ -f $pidfile ] && break

    if [ $i -eq 5 ]; then
      emit "$name failed to start, missing pid file: $pidfile"
      return 1
    fi

    sleep 1
  done

  ps -p `cat $pidfile` >/dev/null 2>/dev/null
  if [ $? -eq 1 ]; then
    emit "$name failed to start"
    return 1;
  fi

  emit "$name started"
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=`cat "$pidfile"`
    trace "Killing $name (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5; do
      trace "Waiting $name (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status ; then
      emit "$name stop failed; still running."
    else
      emit "$name stopped."
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=`cat "$pidfile"`
    if ps -p $pid > /dev/null 2> /dev/null ; then
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL `cat "$pidfile"`
  fi
}


case "$1" in
  force-start|start|stop|force-stop|restart)
    trace "Attempting '$1' on gokeyless"
    ;;
esac

case "$1" in
  force-start)
    exec "$0" start
    ;;
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      emit "$name is already running"
      exit $code
    else
      start
      exit $?
    fi
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status) 
    status
    code=$?
    if [ $code -eq 0 ] ; then
      emit "$name is running"
    else
      emit "$name is not running"
    fi
    exit $code
    ;;
  restart) 
    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|force-start|stop|force-start|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?
